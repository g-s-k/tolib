#!/usr/bin/env python3

""" imports """
from distutils.util import strtobool
import glob
import mutagen
import os
import pathlib
from PIL import Image
import shutil
import sys
import typing

""" constants """
_lib_directory = pathlib.Path(
    os.getenv("MUSIC_LIBRARY", os.path.join(pathlib.Path.home(), "Music")))
_img_extensions = ("png", "jpg", "jpeg")

""" helper functions """
def get_music_files(pth: pathlib.Path) -> typing.List[mutagen.FileType]:
    """get all music files in the current directory"""
    files = [mutagen.File(f) for f in os.listdir(pth) if os.path.isfile(f)]
    return [f for f in files if f is not None]

def get_img_files(pth: pathlib.Path) -> typing.List[pathlib.Path]:
    """get all image files in the current directory"""
    patterns = [glob.iglob(os.path.join(pth, "*." + e)) for e in _img_extensions]
    de_nested = [f for f_ in patterns for f in f_]
    return de_nested

def get_img_size(pth: pathlib.Path) -> int:
    """get image size"""
    sz = Image.open(pth).size
    return sz[0] * sz[1]

def build_dirname(f: mutagen.FileType) -> pathlib.Path:
    """make a (naively constructed) directory name from metadata in a file"""
    d = dict(f)
    rel_pth = [_lib_directory]
    # albumartist with fallback of track artist
    artist = d.get("albumartist", d.get("artist", None))
    rel_pth.append(input("Enter album artist: ") if artist is None else artist[0])
    # album
    album = d.get("album", None)
    rel_pth.append(input("Enter album name: ") if album is None else album[0])
    return pathlib.Path(os.path.join(*rel_pth))

""" main function """
def main() -> None:
    # decide where to work
    work_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    # get the files
    files = get_music_files(pathlib.Path(work_dir))
    if len(files) == 0:
        return
    # decide on a destination
    new_dir = build_dirname(files[0])
    print("\nDestination directory: {0}\n".format(new_dir))
    # check for a collision
    if os.path.exists(new_dir):
        confirm = input("\nDestination already exists. Continue? [y/N]: ")
        if not strtobool(confirm):
            return
        else:
            print("")
        # remove existing mp3 files
        for mp3 in glob.iglob(os.path.join(new_dir, "*.mp3")):
            os.remove(mp3)
    else:
        os.makedirs(new_dir)
    # copy over new files
    files_to_copy = glob.iglob(os.path.join(work_dir, "*.flac"))
    for file in files_to_copy:
        if os.path.isfile(file):
            shutil.copy2(file, new_dir)
    # handle album art
    new_art = get_img_files(new_dir)
    art = {f: get_img_size(f) for f in get_img_files(work_dir) + new_art}
    biggest_img = max(art, key=lambda k: art[k])
    if os.path.dirname(biggest_img) is work_dir:
        for f in new_art:
            os.remove(f)
        _, art_ext = os.path.splitext(biggest_img)
        shutil.copy2(biggest_img, os.path.join(new_dir, "cover" + art_ext))

""" if invoked """
if __name__ == "__main__":
    main()
