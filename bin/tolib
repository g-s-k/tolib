#!/usr/bin/env python3

""" imports """
from distutils.util import strtobool
import glob
import mutagen
import os
import pathlib
from PIL import Image
import re
import shutil
import subprocess
import sys
import typing

""" constants """
_lib_directory = pathlib.Path(
    os.getenv("MUSIC_LIBRARY", os.path.join(pathlib.Path.home(), "Music")))
_img_extensions = ("png", "jpg", "jpeg")

""" helper functions """
def get_music_files(pth: pathlib.Path) -> typing.List[mutagen.FileType]:
    """get all music files in the current directory"""
    file_names = [os.path.join(pth, f) for f in os.listdir(pth)]
    files = [mutagen.File(f) for f in file_names if os.path.isfile(f)]
    return [f for f in files if f is not None]

def get_img_files(pth: pathlib.Path) -> typing.List[pathlib.Path]:
    """get all image files in the current directory"""
    patterns = [glob.iglob(os.path.join(pth, "*." + e)) for e in _img_extensions]
    de_nested = [f for f_ in patterns for f in f_]
    return de_nested

def get_img_size(pth: pathlib.Path) -> int:
    """get image size"""
    sz = Image.open(pth).size
    return sz[0] * sz[1]

def build_dirname(f: mutagen.FileType) -> pathlib.Path:
    """make a (naively constructed) directory name from metadata in a file"""
    d = dict(f)
    rel_pth = [_lib_directory]
    # albumartist with fallback of track artist
    artist = d.get("albumartist", d.get("artist", None))
    # confirm
    artist_prompt = "Enter album artist" +\
        ("" if artist is None else " (default {0})".format(*artist)) + ": "
    artist_inpt = input(artist_prompt)
    rel_pth.append(artist_inpt if artist_inpt else artist[0])
    # album
    album = d.get("album", None)
    album_prompt = "Enter album" +\
        ("" if album is None else " (default {0})".format(*album)) + ": "
    album_inpt = input(album_prompt)
    rel_pth.append(album_inpt if album_inpt else album[0])
    return pathlib.Path(os.path.join(*rel_pth))

def clean_tags(f: mutagen.FileType) -> mutagen.FileType:
    """remove useless or annoying tags, split multiples, etc."""
    _awful_tags = (
        "comment",
        "genre",
        "isrc",
        "upc",
        "barcode",
        "organization",
        "copyright",
        "bpm",
        "length",
        "website",
        "www"
    )
    _awful_categories = (
        "musicbrainz_.*",
        "replaygain_.*",
        "catalog.*",
        "beatport.*",
        ".*label.*",
        "encod.*",
        ".*key.*",
        "itunes.*"
    )
    for key in f.keys():
        if key.lower() in _awful_tags or any(re.search(p, key.lower())
                                             is not None
                                             for p in _awful_categories):
            f.pop(key)
    # fix date tag
    if len(f.get("date", ["0000"])[0]) > 4:
        date = f.pop("date")
        date[0] = date[0][:4]
        f["date"] = date
    # fix title
    if "title" in f:
        title = f.pop("title")[0]
        # remove "original mix"
        title = re.sub("\s*(-\s*|\()[Oo]riginal( [Mm]ix)?\)?\s*$", "", title)
        # split out featured artist
        tmp_featured = re.split("\s*\(feat(\.|uring)?\s*", title)
        if len(tmp_featured) == 2:
            title = tmp_featured[0]
            featured = re.sub("\s*\)\s*$", "", tmp_featured[1])
            if "performer" in f:
                f["performer"].append(featured)
            else:
                f["performer"] = [featured]
        f["title"] = [title]
    return f

def rename_file(f: pathlib.Path) -> str:
    """make a filename out of a song's metadata"""
    m = mutagen.File(f)
    if m is None: return
    new_name_parts = []
    if "tracknumber" in m:
        if "discnumber" in m:
            new_name_parts.append(pad_num_str(m["discnumber"][0]) + ".")
        new_name_parts.append(pad_num_str(m["tracknumber"][0]) + " - ")
    new_name_parts.append(m["title"][0])
    if "version" in m:
        new_name_parts.append(" - " + " - ".join(m["version"]))
    return "".join(new_name_parts)

def pad_num_str(s: str) -> str:
    return "{0:02d}".format(int(s))

""" main function """
def main() -> None:
    # decide where to work
    work_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    # get the files
    files = get_music_files(pathlib.Path(work_dir))
    if len(files) == 0:
        return
    # decide on a destination
    new_dir = build_dirname(files[0])
    del files
    print("\nDestination directory: {0}\n".format(new_dir))
    # check for a collision
    if os.path.exists(new_dir):
        confirm = input("\nDestination already exists. Continue? [y/N]: ")
        if not strtobool(confirm):
            return
        else:
            print("")
        # remove existing mp3 files
        for mp3 in glob.iglob(os.path.join(new_dir, "*.mp3")):
            os.remove(mp3)
    else:
        os.makedirs(new_dir)
    # copy over new files
    files_to_copy = glob.iglob(os.path.join(work_dir, "*.flac"))
    for file in files_to_copy:
        if os.path.isfile(file):
            shutil.copy2(file, new_dir)
    # handle album art
    new_art = get_img_files(new_dir)
    if len(new_art) > 0:
        art = {f: get_img_size(f) for f in get_img_files(work_dir) + new_art}
        biggest_img = max(art, key=lambda k: art[k])
        if os.path.dirname(biggest_img) is work_dir:
            for f in new_art:
                os.remove(f)
            _, art_ext = os.path.splitext(biggest_img)
            shutil.copy2(biggest_img, os.path.join(new_dir, "cover" + art_ext))
    # clean up the tags
    new_files = [clean_tags(f) for f in get_music_files(pathlib.Path(new_dir))]
    for f in new_files:
        f.save()
    del new_files
    # open Ex Falso to handle everything else manually
    subprocess.run(["exfalso", new_dir], stderr=subprocess.DEVNULL)
    # rename files
    final_files_n = [glob.iglob(os.path.join(pathlib.Path(new_dir, "*." + e)))
                     for e in ["mp3", "flac"]]
    final_files = [f for f_ in final_files_n for f in f_]
    for f in final_files:
        new_name = rename_file(f)
        if new_name is not None:
            f_ext = os.path.splitext(f)[-1]
            shutil.move(f, os.path.join(new_dir, new_name + f_ext))

""" if invoked """
if __name__ == "__main__":
    main()
